// <auto-generated />
using System;
using CarManagmentApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarManagmentApi.Migrations
{
    [DbContext(typeof(CarManagmentAppContext))]
    partial class CarManagmentAppContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CarGarage", b =>
                {
                    b.Property<long>("CarsId")
                        .HasColumnType("bigint");

                    b.Property<long>("GaragesId")
                        .HasColumnType("bigint");

                    b.HasKey("CarsId", "GaragesId");

                    b.HasIndex("GaragesId");

                    b.ToTable("Car_Garage_Join", (string)null);
                });

            modelBuilder.Entity("CarManagmentApi.Entities.Car", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductionYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            LicensePlate = "XYZ123",
                            Make = "Toyota",
                            Model = "Camry",
                            ProductionYear = 2020
                        },
                        new
                        {
                            Id = 2L,
                            LicensePlate = "ABC789",
                            Make = "Honda",
                            Model = "Civic",
                            ProductionYear = 2021
                        });
                });

            modelBuilder.Entity("CarManagmentApi.Entities.Garage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Garages");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Capacity = 20,
                            City = "City A",
                            Location = "Downtown",
                            Name = "Garage A"
                        },
                        new
                        {
                            Id = 2L,
                            Capacity = 15,
                            City = "City B",
                            Location = "Uptown",
                            Name = "Garage B"
                        });
                });

            modelBuilder.Entity("CarManagmentApi.Entities.Maintenance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CarId")
                        .HasColumnType("bigint");

                    b.Property<long>("GarageId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("GarageId");

                    b.ToTable("Maintenances");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CarId = 1L,
                            GarageId = 1L,
                            ScheduledDate = new DateTime(2025, 1, 2, 20, 14, 31, 317, DateTimeKind.Local).AddTicks(801),
                            ServiceType = "Oil Change"
                        },
                        new
                        {
                            Id = 2L,
                            CarId = 2L,
                            GarageId = 2L,
                            ScheduledDate = new DateTime(2025, 1, 5, 20, 14, 31, 317, DateTimeKind.Local).AddTicks(843),
                            ServiceType = "Tire Rotation"
                        });
                });

            modelBuilder.Entity("CarGarage", b =>
                {
                    b.HasOne("CarManagmentApi.Entities.Car", null)
                        .WithMany()
                        .HasForeignKey("CarsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarManagmentApi.Entities.Garage", null)
                        .WithMany()
                        .HasForeignKey("GaragesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarManagmentApi.Entities.Maintenance", b =>
                {
                    b.HasOne("CarManagmentApi.Entities.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarManagmentApi.Entities.Garage", "Garage")
                        .WithMany("Maintenances")
                        .HasForeignKey("GarageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Garage");
                });

            modelBuilder.Entity("CarManagmentApi.Entities.Garage", b =>
                {
                    b.Navigation("Maintenances");
                });
#pragma warning restore 612, 618
        }
    }
}
